" -----------------------------------------------------------------------------
"            \BBBBBBBBBBBBBBB&*      B   B      *&BBBBBBBBBBBBBBB/
"                \&BBBBBBBBBBBB&\___/BBBBB\___/&BBBBBBBBBBBB&/
"                  \%BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB%/
"                    \BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB/
"                       *****\%BBBBBBBBBBBBBBBBB%/*****
"                              ...#BBBBBBBBB#...
"                                   \BBBBB/
"                                     \B/
"                                      B
"
" -----------------------------------------------------------------------------

" -----------------------------------------------------------------------------
" -------------------------------   Options     -------------------------------
" -----------------------------------------------------------------------------


" Enable filetype detection for plugins and indentation options
filetype plugin indent on
" Colors
syntax on

" Encoding
set encoding=utf-8
set mouse=a
set number

" Show cmd on the bottom
set showcmd

" Set list chars:
" trail -> trailing spaces
" nbsp -> non breakable space character
set list listchars=tab:>-,nbsp:.,eol:$,trail:.

" Faster update time
set updatetime=100

" Enable visual bell and deactivate the flash
set visualbell
set t_vb=
set belloff=all

" Add info to statusline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Add all directory and sub directory to path for find
set path+=**

" Wild menu for auto complete
set wildmenu
" Remove the check of included files for the auto complete
set complete-=i

" ---------------------- Backup, Undo and Swap directory ----------------------
if !isdirectory($HOME."/.vim/tmp/backup")
    silent! execute "!mkdir -p ~/.vim/tmp/backup"
endif
if !isdirectory($HOME."/.vim/undodir")
    silent! execute "!mkdir -p ~/.vim/tmp/undodir"
endif
if !isdirectory($HOME."/.vim/swap")
    silent! execute "!mkdir -p ~/.vim/tmp/swap"
endif

set undodir=~/.vim/tmp/undodir
set undofile
set backupdir=~/.vim/tmp/backup
set backup
set directory=~/.vim/tmp/swap
set swapfile

set clipboard=unnamed

" -------------------------------- Search -------------------------------------

" Highlight the case
set hlsearch
" Ignore case
set ignorecase
" Don't ignore case if uppercase is specified
set smartcase
" Move to match
set incsearch

" Jump to matching for brackets and co
set showmatch

" Time for the showmatch
set matchtime=2

" ---------------------------------- File -------------------------------------

" Auto reload file when it has changed outside of vim
set autoread

" Auto write buffer when exiting
set autowrite

" ------------------------------ Tab and CO -----------------------------------

" Insert spaces instead of tab char
set expandtab

" Number of spaces a tab char counts for
set tabstop=8
" When press TAB (number of spaces) 
set shiftwidth=4
" Keep the indent when creating new line
set autoindent
" Delete smartindent spaces and add to match width
set smarttab
" Auto indent
set smartindent

" --------------------------------- Text --------------------------------------

" Text width
set textwidth=79

" Color column
set cc=80

" Width when inserting tab
set softtabstop=4

" Stuff that backspace can delete
set backspace=eol,start,indent

" Allow moving between lines
set whichwrap=b,s,<,>,h,l

if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j " Delete comment character when joining commented lines
endif

" Extend history and number of max tabs
if &history < 1000
  set history=1000
endif
if &tabpagemax < 50
  set tabpagemax=50
endif

" ------------------------------ Quickfix -------------------------------------

" Quickfix list switch
set swb=useopen,vsplit

" -----------------------------------------------------------------------------
" -------------------------------      UI       -------------------------------
" -----------------------------------------------------------------------------

" status line always present
set laststatus=2

" Display, add lastine
set display+=lastline

" Display mode
set showmode

" Highlight current line
set cursorline

" Scroll
set scrolloff=1
set sidescrolloff=5

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" -----------------------------------------------------------------------------
" ---------------------------      Mapping      -------------------------------
" -----------------------------------------------------------------------------

let mapleader=","

" Resize window with arrows
nnoremap <Left> :vert:res -5<CR>
nnoremap <Right> :vert:res +5<CR>
nnoremap <Up> :res -5<CR>
nnoremap <Down> :res +5<CR>

" Remove the highlight
nnoremap <leader>h :noh<CR>

" Toggle paste mode
noremap <leader>pp :setlocal paste!<cr>

" Command line remap
cnoremap <C-A> <Home>
cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>

" Tab char
inoremap <S-Tab> <C-V><Tab>

" terminal
nnoremap <leader>te :rightb terminal ++rows=12<CR>

" ---------------------------- Quickfix list ----------------------------------

nnoremap <leader>cw :botright :cw<CR>
nnoremap <leader>ccl :ccl<CR>

" --------------------------------- Make --------------------------------------

nnoremap <leader>m :silent! :make! \| :redraw!<CR>
nnoremap <leader>mc :silent! :make! check \| :redraw!<CR>
nnoremap <leader>ml :silent! :make! clean \| :redraw!<CR>

" ------------------------------ Fugitive -------------------------------------

nnoremap <leader>gd :Gvdiffsplit!<CR>
nnoremap <leader>g2 :diffget //2<CR>
nnoremap <leader>g3 :diffget //3<CR>
nnoremap <leader>gp :diffput<CR>

nnoremap <leader>gt :Git tag -a -m ''<Space>

" -----------------------------------------------------------------------------
" -----------------------     Filetype specific     ---------------------------
" -----------------------------------------------------------------------------

autocmd BufNewFile,BufRead *.mail setfiletype mail

" -----------------------------------------------------------------------------
" ---------------------------     Skeletons     -------------------------------
" -----------------------------------------------------------------------------

" Signature
nnoremap <leader>sig :-1read ~/.signature.mail<CR>O-- <C-V><C-M><Esc>

" -----------------------------------------------------------------------------
" ---------------------------      Plugin       -------------------------------
" -----------------------------------------------------------------------------

call plug#begin('~/.vim/plugged')

" markdown align
Plug 'junegunn/vim-easy-align'

" syntax highlight for nix
Plug 'LnL7/vim-nix'

" Theme
Plug 'joshdick/onedark.vim', { 'branch': 'main' }
Plug 'itchyny/lightline.vim'

" [x] Git integration
Plug 'tpope/vim-fugitive'
" [x] Bracket mapping
Plug 'tpope/vim-unimpaired'
" [x] Automatic sessions
Plug 'tpope/vim-obsession'
" [x] Surround
Plug 'tpope/vim-surround'
" [x] repeat
Plug 'tpope/vim-repeat'
" [x] LSP
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" [x] testing
Plug 'janko/vim-test'

" [x] svelte syntax highlight
Plug 'leafOfTree/vim-svelte-plugin'

" [x] mdx syntax highlight
Plug 'jxnblk/vim-mdx-js'

call plug#end()


" ---------------------------- Builtin Plugins --------------------------------
packadd termdebug

" -----------------------------------------------------------------------------
" -----------------------       Plugin Config       ---------------------------
" -----------------------------------------------------------------------------
"
" ----------------------------- COC Mappings ----------------------------------

inoremap <silent><expr> <C-@> coc#refresh()

" Use K to show documentation in preview window.
nnoremap <silent> <leader>K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Navigation
nnoremap <leader>kd :CocDiagnostic<cr>
nnoremap <leader>kp <Plug>(coc-diagnostic-prev)
nnoremap <leader>kn <Plug>(coc-diagnostic-next)


" GoTo code navigation.
nmap <silent> <leader>kk <Plug>(coc-definition)
nmap <silent> <leader>kt <Plug>(coc-type-definition)
nmap <silent> <leader>ki <Plug>(coc-implementation)
nmap <silent> <leader>kr <Plug>(coc-references)

" Symbol renaming.
nmap <leader>krn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>kf  <Plug>(coc-format-selected)
nmap <leader>kf  <Plug>(coc-format-selected)
nnoremap <leader>ko  <Plug>(coc-format)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>kac  <Plug>(coc-codeaction)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

nnoremap <leader>kb :silent! :Format<CR>

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')

" ------------------------------- COC Config ----------------------------------

let g:coc_global_extensions = [
      \'coc-markdownlint',
      \'coc-yaml',
      \'coc-go',
      \'coc-xml',
      \'coc-pyright',
      \'coc-json',
      \'coc-clangd',
      \'coc-json',
      \]

" ------------------------------- Easy Align ----------------------------------

" mapping for markdown align
nmap <leader>ga <Plug>(EasyAlign)
xmap <leader>ga <Plug>(EasyAlign)

" ------------------------------- Last Line -----------------------------------

" lightline properties
let g:lightline = {
        \ 'colorscheme': 'onedark',
        \ 'active': {
        \   'left': [ [ 'mde', 'paste' ],
        \             [ 'gitbranch', 'readonly',
        \               'filename', 'modified' ] ],
        \   'right': [ [ 'lineinfo' ],
        \              [ 'percent' ],
        \              [ 'fileencoding', 'filetype', 'charvaluehex' ] ]
        \ },
        \ 'component_function': {
        \   'gitbranch': 'FugitiveHead'
        \ },
        \ 'component': {
        \   'charvaluehex': '0x%B'
        \ },
    \ }

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("termguicolors"))
    set termguicolors
  endif
endif

autocmd ColorScheme * call onedark#extend_highlight("Identifier", { "fg": { "gui": "#26c7a4" } })

colorscheme onedark
